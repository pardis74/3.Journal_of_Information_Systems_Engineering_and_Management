class LSTMModel:
    """
    Represents the Long Short-Term Memory (LSTM) neural network for classification.
    """
    def __init__(self, input_shape, num_classes=2, num_hidden_units=50, learning_rate=0.001):
        self.input_shape = input_shape # (sequence_length, num_features_per_timestep)
        self.num_classes = num_classes
        [cite_start]self.num_hidden_units = num_hidden_units # Max 50 hidden layers mentioned [cite: 99]
        [cite_start]self.learning_rate = learning_rate # Set at 0.001 [cite: 100]
        self.model = self._build_model()

    def _build_model(self):
        """
        Builds the Keras LSTM model.
        """
        model = Sequential([
            LSTM(self.num_hidden_units, activation='tanh', input_shape=self.input_shape),
            Dropout(0.2), # Adding dropout for regularization
            Dense(self.num_classes, activation='softmax') if self.num_classes > 1 else Dense(1, activation='sigmoid')
        ])
        optimizer = Adam(learning_rate=self.learning_rate)
        model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy' if self.num_classes > 1 else 'binary_crossentropy', metrics=['accuracy'])
        print(f"LSTM model built with {self.num_hidden_units} hidden units and learning rate {self.learning_rate}.")
        model.summary()
        return model

    def train(self, X_train, y_train, epochs=15, batch_size=32, validation_split=0.2):
        """
        Trains the LSTM model.
        [cite_start]MaxEpochs is considered 15[cite: 100].
        """
        print(f"Training LSTM model for {epochs} epochs...")
        history = self.model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=validation_split, verbose=0)
        print("LSTM model training complete.")
        return history

    def evaluate(self, X_test, y_test):
        """
        Evaluates the LSTM model's performance on test data.
        """
        print("Evaluating LSTM model...")
        loss, accuracy = self.model.evaluate(X_test, y_test, verbose=0)
        y_pred_probs = self.model.predict(X_test, verbose=0)
        y_pred = np.argmax(y_pred_probs, axis=1) if self.num_classes > 1 else (y_pred_probs > 0.5).astype(int)

        precision = precision_score(y_test, y_pred, average='binary' if self.num_classes == 2 else 'weighted')
        recall = recall_score(y_test, y_pred, average='binary' if self.num_classes == 2 else 'weighted')
        f1 = f1_score(y_test, y_pred, average='binary' if self.num_classes == 2 else 'weighted')

        metrics = {
            "accuracy": accuracy,
            "precision": precision,
            "recall": recall,
            "f1_score": f1
        }
        print("LSTM model evaluation complete.")
        return metrics
